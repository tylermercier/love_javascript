Intro

Javascript testing
  - Most popular language on github

Why test javascript
  - Instant Gratification
    - Know what you wrote works
  - Uncover bugs
    - Remove bugs before you even commit
  - Better Design
    - You become your own user
    - Tackle design from more than one perspective
  - Automation
    - Fast, consistent validation

Javascript testing
  - Avoid DOM selectors in JS files
    - use jQuery (library) objects instead
  - Avoid savings state in the DOM
    - interogating the DOM in general is going to problematic
  - Don't pollute the global namespace
    - Avoid global functions
    - Use Javascript namespaces
  - Favor good patterns and practices
    - Module pattern for singletons, classes for objects
    - Dependency inversion
    - Good OO practices such as, Single responsiblity principle & Low coupling
    - Everything that applies to your primary language!

Jasmine
  - Behavior-Driven Development framework
    - BDD is like TDD, but more natural
  - Clean API
    - Pivotal Labs did a really good job building jasmine
  - Includes everything you need
    - No extra mocking or hacking

Jasmine Example
  - Openning 'describe' block defines system under test
  - 'beforeEach' is creating two objects needed within the test
  - Next 'describe' block defines method under test
  - 'it' block defines behavior
  - 'expect' is the verification

Jasmine Features
  - Large set of matchers
    - equality, regex, null, undefined, contains
  - Built in test doubles
    - Jasmineâ€™s test doubles are called spies
    - A spy can stub any function and tracks calls to it and all arguments
  - Mock the Javascript clock
    - Great for things like setTimeout or setInterval
  - Asynchronous Support
    - The waitsFor block takes a latch function, a failure message, and a timeout.
    - It does come up, so this is an important feature
  - CI Reporting
    - We added a custom reporter for todays demonstration

CoffeeScript Benefits
  - Pit of success
    - Natural shorthand of good JavaScript
  - Terse, do more with less
    - Often half as much code
  - Closure scoping, var that = gone
    - Less trouble for your mind
  - Beautiful Valid JavaScript
    - JavaScript produced looks good!

CoffeeScript Challenges
  - Learn another language
    - Takes time
  - Compile step
    - Takes infrastructure
  - Debugging
    - Takes mental effort